name: Deploy Hana Project Main

on:
  push:
      branches:
        - main
  pull_request:
    types: [closed]
    branches:
      - main # dev 브랜치에 merge된 경우만

jobs:
  deploy:
    if: |
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_KEY_SERVICE }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p ${{ secrets.PORT_SERVICE }} -H ${{ secrets.HOST_SERVICE }} >> ~/.ssh/known_hosts
      
      - name: Test key validity
        run: |
          ssh-keygen -y -f ~/.ssh/id_rsa > /SERVICE/null && echo "✅ SSH 키 정상" || echo "❌ SSH 키 형식 오류"

      - name: 📄 Generate .env file locally
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env
          echo "OPENAI_API_MODEL=${{ secrets.OPENAI_API_MODEL }}" >> .env
          echo "OPENAI_API_URL=${{ secrets.OPENAI_API_URL }}" >> .env
          echo "OPENAI_PROMPT_COMMON=${{ secrets.OPENAI_PROMPT_COMMON }}" >> .env
          echo "OPENAI_PROMPT0=${{ secrets.OPENAI_PROMPT0 }}" >> .env
          echo "OPENAI_PROMPT1=${{ secrets.OPENAI_PROMPT1 }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME_SERVICE }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD_SERVICE }}" >> .env
          echo "ROOT_DATABASE_PASSWORD=${{ secrets.ROOT_DATABASE_PASSWORD_SERVICE }}" >> .env
          echo "DATABASE_DB=${{ secrets.DATABASE_DB_SERVICE }}" >> .env
          echo "JWT_ISSUER=${{ secrets.JWT_ISSUER }}" >> .env
          echo "JWT_SECRETKEY=${{ secrets.JWT_SECRETKEY }}" >> .env
          echo "INIT_DB=init_SERVICE.sql" >> .env
          echo "MYSQL_HOST=mysql" >> .env
          echo "REDIS_HOST=redis" >> .env

      - name: 📄 Generate frontend .env.production
        working-directory: Hana_Bridge_FE-Cli
        run: |
          echo "VITE_API_URL=https:/api" > .env.production
          
      - name: 🧱 Build Backend
        working-directory: Hana_Bridge_BE-API
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
      
      - name: ⚙️ Build Frontend
        working-directory: Hana_Bridge_FE-Cli
        run: npm install && npm run build

      - name: 📂 Prepare deploy folder
        run: |
          mkdir -p deploy/Hana_Bridge_BE-API/build/libs
          mkdir -p deploy/Hana_Bridge_FE-Cli/dist
          mkdir -p deploy/Hana_Bridge_FE-Cli
          mkdir -p deploy/MySQL_init
      
          cp -r Hana_Bridge_BE-API/build/libs/* deploy/Hana_Bridge_BE-API/build/libs/
          cp -r Hana_Bridge_FE-Cli/dist/* deploy/Hana_Bridge_FE-Cli/dist/
          cp Hana_Bridge_BE-API/Dockerfile deploy/Hana_Bridge_BE-API/
          cp Hana_Bridge_FE-Cli/nginx.conf deploy/Hana_Bridge_FE-Cli/
          cp Hana_Bridge_FE-Cli/Dockerfile deploy/Hana_Bridge_FE-Cli/
          cp -r MySQL_init/* deploy/MySQL_init/
          cp docker-compose.yml deploy/
          cp .env deploy/


      - name: 📂 Upload artifacts to server
        run: |
          rsync -avz -e "ssh -p ${{ secrets.PORT_SERVICE }}" \
            deploy/ \
            ${{ secrets.USERNAME_SERVICE }}@${{ secrets.HOST_SERVICE }}:${{ secrets.DEPLOY_PATH_SERVICE }}

      - name: 🔍 서버에서 .env 확인
        run: |
          ssh -p ${{ secrets.PORT_SERVICE }} ${{ secrets.USERNAME_SERVICE }}@${{ secrets.HOST_SERVICE }} "
            echo '[서버 내 .env 확인]' && \
            cat ${{ secrets.DEPLOY_PATH_SERVICE }}/.env || echo '❌ .env 파일이 없습니다'
          "
      
